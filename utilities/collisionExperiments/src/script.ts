var xA = -1; // A x coords
var yA = -1; // A y coords
var rA = 100; // A rotation in degrees

var xB = -1; // A x coords
var yB = -5; // A y coords
var rB = 45; // A rotation in degrees

class BitMap {
  map: number[][][] = [];
  width: number = 0;
  height: number = 0;
  debug: string;
  
  constructor(map:number[][]){
    this.width = map[0].length;
    this.height = map.length;
    this.map[0] = map;
  }
  
  intersects(b:BitMap, xDiff:number, yDiff:number, r1:number = 0, r2:number = 0, DEBUG = false):boolean {
    this.debug = "<br>";
    var result = false;
    for(let y = 0; y < this.height; y++){
      for(let x = 0; x < this.width; x++){
        if(this.get(x,y,r1) && b.get(x - xDiff,y - yDiff,r2)){
          this.debug += "■ ";
          result = true;
          if(!DEBUG){
            return true;
          }
        } else {
          this.debug += "□ ";
        }
      }
      this.debug += "<br>";
    }
    
    if(DEBUG){
      return result;
    }
    return false;
  }
  
  get(x:number,y:number,d:number):boolean {
    if(!this.map[d]){
      this.map[d] = rotateMatrix(this.map[0], d);
    }
    
    if(x < this.width && y < this.height && x >= 0 && y >= 0){
      if(this.map[d][y][x] == 1){
        return true;   
      } 
    }

    return false;
  }
  
  toString(d:number = 0):string {
    var output = "\n";
    
    for(let y = 0; y < this.height; y++){
      for(let x = 0; x < this.width; x++){
        if(this.get(x,y,d) == 1){
          output += "■ ";
        } else {
          output += "□ "
        }
      }
      output += "<br>";
    }
    return output;
  }
}

var M = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],];
var A = [[0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,],[0,0,0,1,1,1,1,0,0,0,],[0,0,0,1,1,1,1,0,0,0,],[0,0,0,1,1,1,1,0,0,0,],[0,0,0,1,1,1,1,0,0,0,],[0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,],];
var B = [[0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,1,1,0,0,0,0,],[0,0,0,0,1,1,0,0,0,0,],[0,0,0,0,1,1,0,0,0,0,],[0,1,1,1,1,1,1,1,1,0,],[0,1,1,1,1,1,1,1,1,0,],[0,0,0,0,1,1,0,0,0,0,],[0,0,0,0,1,1,0,0,0,0,],[0,0,0,0,1,1,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,],];
var a = new BitMap(A);
var b = new BitMap(B);

var $a = document.getElementById("a")
var $b = document.getElementById("b")
var $c = document.getElementById("c")

$a.innerHTML = a.toString(rA);
$b.innerHTML = b.toString(rB);
$a.style.left = xA * 20 + "px";
$a.style.top = yA * 20 + "px";
$b.style.left = xB * 20 + "px";
$b.style.top = yB * 20 + "px";
a.intersects(b,xB-xA,yB-yA,rA,rB,true);
$c.innerHTML = a.debug;

function radians(d: number) {
  return (d * Math.PI) / 180.0;
}

function getEmptyMatrix(s:number){
  let m = [];
  for (let y = 0; y < s; y++) {
    m.push([]);
    for (let x = 0; x < s; x++) {
      m[y].push(0);
    }
  }
  return m;
}

function rotateMatrix(m: number[][], d: number) {
  var r = radians(d % 360);
  
  var dest = getEmptyMatrix(m.length);
  
  var h = m.length;
  var w = m[0].length;
  var mh = h/2 - 0.5;
  var mw = w/2 - 0.5;
  
  var c = Math.cos(r);
  var s = Math.sin(r);
   let x0 = Math.round(mw - c*mw - s*mh)
   let y0 = Math.round(mh - c*mh + s*mw)
   
  for (let y = 0; y < h; y++) {
    for (let x = 0; x < w; x++) {
      let srcX = Math.round(c * x + s * y + x0);
      let srcY = Math.round(-s * x + c * y + y0);

      if(srcY < h && srcX < w && srcX >= 0 && srcY >= 0){
        dest[y][x] = m[srcY][srcX];
      }
    }
  }

  return dest;
}
